
MEMORIA DEL PROYECTO FINAL DE PROCESAMIENTO DE LENGUAJES:
-------------------------------------------------------------
-------------------------------------------------------------

Autores: Nuria Iglesias Traviesa - n.iglesias@udc.es
         Xoel  González Pereira  - xoel.gonzalezp@udc.es


CONVERSOR DE MARKDOWN A HTML
-----------------------------

Índice:

1. Objetivos
2. Ficheros que componen el proyecto
3. Instrucciones de compilación y ejecución
4. Descripción del analizador léxico y sintáctico
5. Tratamiento de errores
6. Peculiaridades sobre la práctica


1. Objetivos
--------------

El objetivo de esta práctica es la realización de un conversor de lenguaje Markdown al lenguaje HTML. Markdown es un lenguaje de marcado ligero para crear texto, utilizando un editor de texto sin formato, por otra parte, HTML es un lenguaje de marcado utilizado para la elaboración de páginas web.

Al inicio de esta práctica nos hemos propuesto aceptar cualquier tipo de fichero en formato Markdown (prueba.md) , tanto léxicamente como gramaticalmente, convirtiéndolo en otro fichero en formato HTML (salida.html).

2. Ficheros que componen el proyecto
--------------------------------------

Los ficheros que componen el proyecto son el Makefile, el cual permite compilar el proyecto (tanto proyecto.l como proyecto.y). Además, también está compuesto por proyecto.l, donde se ha definido la parte léxica del lenguaje de marcado Markdown, con las respectivas reglas para cada token, teniendo en cuenta las peculiaridades de Markdown. Estos tokens luego serán definidos en proyecto.y, donde se construye la gramática del conversor, con las respectivas reglas para cada token. A mayores, se ha definido el tipo para cada regla, de esta forma permite almacenar el valor de cada regla para posteriormente almacenarlo en salida.html. Finalmente, se han creado archivos llamados prueba.md y prueba2.md donde se puede definir cualquier tipo de sintaxis en Markdown, que una vez compilado se traducirá a lenguaje HTML en el archivo salida.html. La única diferencia entre estos dos ficheros es que uno cuenta con cabecera (<head>) y otro sin ella. Además, se ha creado un tercer fichero de llamado prueba.txt, para corroborar que el tratamiento de errores de la extensión de los ficheros de entrada funciona correctamente, es decir, el fichero prueba.txt falla al no tener extensión Markdown (.md)


3. Instrucciones de compilación y ejecución
---------------------------------------------

Se hace la comprobación primero en el Makefile de que funciona correctamente, ejecutando: flex proyecto.l
            bison -o proyecto.tab.c proyecto.y -yd
            gcc -o proyecto lex.yy.c proyecto.tab.c -lfl -ly
            
Para que lo compile y ejecute: ./proyecto prueba.md

Finalmente, todos estos pasos se podrían simplificar solo con ejecutar el comando: make


4. Descripción del analizador léxico y sintáctico
---------------------------------------------------

Primeramente, en el analizador léxico se define la sección de declaraciones, creando el contenido de Markdown, separando: textword, digit y title.

En la sección de reglas del mismo fichero, se permite la entrada de los distintos títulos en función del número de #. Las listas se definen teniendo en cuenta si son ordenadas o desordenadas. Las distintas combinaciones que alteran el formato en el que se ve el texto (cursiva, code, scratch, emphasis, comb, comb2, span y span2), se definen teniendo en cuenta como se escriben en Markdown. Finalmente, para definir los links y las imágenes, se han creado tres reglas, usando una para ambos (link). Además, tenemos en cuenta los espacios en blanco a través de la regla BR, para luego imprimirlos en el fichero de salida.


En el caso del analizador sintáctico, se han definido los tokens que anteriormente se han usado en el analizador léxico, definimos tres reglas junto con el axioma para permitir cualquier tipo de las distintas combinaciones que presenta el lenguaje Markdown.
A cada regla se le ha añadido su tipo para poder almacenar el valor $$ (el de la propia regla), de esta manera al final de todo se podrá almacenar en el orden correcto y en el formato HTML guardándose en el archivo salida.html. 
Se han usado una serie de funciones auxiliares en C, que luego son llamadas posteriormente en las reglas : rmposition, openFile, writeLinetoFile, closeFile.
La primera función sirve para eliminar los caracteres innecesarios de la sintaxis de Markdown, y así escribirlos de manera correcta en el formato HTML. La función openFile abre el fichero,la tercera, escribe el valor que se ha almacenado en el buffer(una variable temporal que nos ha ayudado a almacenar el output de las reglas en el orden correcto) en el fichero salida.html. La siguiente función cierra el fichero. Finalmente estas funciones se llaman en el main. Además de estas funciones, se han añadido una serie de variables de tipo boolean para tener en cuenta el inicio de las etiquetas de HTML, <head> y <body> a la hora de almacenar el formato HTML en el fichero.

5. Tratamiento de errores
--------------------------

Debido a que el lenguaje de Markdown es muy abierto, no se han definido casos en los que se detecte un error. Lo que podría llegar a considerarse un error es que el solo poner una letra será considerado como un párrafo o que al poner un título sin la sintaxis Markdown (#titulo) sin poner el espacio necesario entre el # y el texto, también será considerado como un párrafo.
Por otro lado, sí se han definido errores a la hora de abrir el fichero, en caso de que la extensión del fichero markdown no sea la correcta (.md), o de no poder abrir el fichero o crear el nuevo fichero que genera el programa (salida.html), también generará un mensaje de error.


6. Peculiaridades sobre la práctica
------------------------------------

A la hora de detectar el inicio o un fin de una lista ordenada o desordenada, no se ha encontrado una forma de imprimir el tag (<ol></ol> y <ul></ul>) ya que nunca se sabe cuando termina de entrar en la lista.
En cuanto a la aplicación de estilos sencillos, funcionan todos correctamente, tanto la aplicación de color en el texto, como el cambio de tamaño de la fuente. Se ha hecho una prueba para el cambio de tipo de fuente, y se traduce bien a html, pero cuando se abre en el navegador no muestra el cambio de fuente.




